#!/usr/bin/env python

import os, sys, pwd, getopt, datetime, time, cgi, urlparse, signal, string
from time import sleep
import MySQLdb as db
import json
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ThreadingMixIn
import threading, mimetypes, ssl
from hashlib import sha256
from struct import pack, unpack, unpack_from

version = "0.1.0"
cfg = { 'log':sys.argv[0]+'.log', 'listen':'localhost:8085', 'www':'www', 'db':'localhost:btc:test623btc:bitcoin', 'block':0 }

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """ This class allows to handle requests in separated threads.
        No further content needed, don't touch this. """
        
class WebHandler(BaseHTTPRequestHandler):
    def version_string(self):
        return'sqlChain/1.0'
    def do_GET(self):
        try:
            q = urlparse.urlparse(self.path)
            g =  urlparse.parse_qs(q.query)
            path = '/main.html' if q.path == '/' else q.path
            if os.path.isfile(cfg['www']+path):
                _,ext = os.path.splitext(path)
                filesize = os.path.getsize(cfg['www']+path)
                f = open(cfg['www']+path) 
                self.send_response(200)
                self.send_header('Content-type', mimetypes.types_map[ext])
                self.send_header('Content-Length', filesize)
                self.send_header('Expires', self.date_time_string(time.time()+3600))
                self.end_headers()
                self.wfile.write(f.read())
                f.close()
                return
            apis = { "/api":self.do_API, "/rpc":self.do_RPC, "/bci":self.do_BCI }
            if path[:4] in apis:
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                sql = db.connect(*cfg['db'].split(':'))
                data = apis[ path[:4] ](path[4:], sql.cursor(), g)
                self.wfile.write(json.dumps(data))
                return
                                
        except IOError:
            pass
        self.send_error(404,'File Not Found: %s' % self.path)

    def do_POST(self):
        form = cgi.FieldStorage(fp=self.rfile, headers=self.headers, keep_blank_values=True, environ={'REQUEST_METHOD':'POST','CONTENT_TYPE':self.headers['Content-Type']})
        self.send_response(200)
        self.send_header('Content-type','text/html')
        self.end_headers()
        sql = db.connect(*cfg['db'].split(':'))
        if self.path.startswith("/api/addrs/"):
            args = self.path.split('/')[3:]
            addrs = form['addrs'].value.split(',')
            self.wfile.write(json.dumps(apiAddr(sql.cursor(), addrs, args)))
        if self.path == '/':
            data = self.do_RPC("/%s/%s" % (form['method'].value, "/".join(form.getlist('params'))), sql.cursor(), {})
            self.wfile.write(json.dumps(data))
                
    def do_API(self, path, cur, get):
        args = path.split('/')[1:]
        if args[0] == "block-index":
            return apiHeader(cur, args[1], args[2:])
        if args[0] == "block":
            if len(args[1]) == 64 and all(c in string.hexdigits for c in args[1]):
                return apiBlock(cur, args[1])
        if args[0] in ["tx","raw"]:
            if len(args[1]) == 64 and all(c in string.hexdigits for c in args[1]):
                return apiTx(cur, args[1], args)
        if args[0] == "txs":
            txs = []
            if 'block' in get:
                blkhash = get['block'][0]
                if len(blkhash) == 64 and all(c in string.hexdigits for c in blkhash):
                    txhashes = apiBlock(cur, blkhash)
                    txhashes = txhashes['tx'] if 'tx' in txhashes else []
            elif 'address' in get:
                txhashes = apiAddr(cur, [ get['address'][0] ], {}, {})
                txhashes = txhashes['transactions'] if 'transactions' in txhashes else []
            for txhash in txhashes:
                txs.append(apiTx(cur, txhash, []))
            return { 'pagesTotal':1, 'txs': txs }
        if args[0] in ["addr","addrs"]:
            return apiAddr(cur, args[1].split(','), args[2:], get)
        if args[0] == "history":
            return addrHistory(cur, args[1], args[2:])
        if args[0] == "chunk":
            return hdrChunk(cur, int(args[1]))
        if args[0] == "status":
            return apiStatus(cur, get)
        return None
        
    def do_RPC(self, path, cur, get):
        if path.startswith("/getblockcount"):
            return cfg['block']
        if path.startswith("/getinfo"):
            cur.execute("select hdr from blocks where id=%s*4 limit 1;", (cfg['block'],))
            hdr = gethdr(cur.fetchone()[0])
            return { 'blocks':cfg['block'], 'difficulty':bits2diff(hdr['bits']) }
        if path.startswith("/getdifficulty"):
            cur.execute("select hdr from blocks where id=%s*4 limit 1;", (cfg['block'],))
            hdr = gethdr(cur.fetchone()[0])
            return bits2diff(hdr['bits'])
        if path.startswith("/getblock/"):
            return self.do_API("/block/"+path[10:], cur, get)
        if path.startswith("/getblockhash/"):
            rtn = self.do_API("/block-index/"+path[14:], cur, get)
            return rtn['blockHash'] if 'blockHash' in rtn else rtn
        if path.startswith("/getrawtransaction/"):
            return self.do_API("/tx/"+path[19:], cur, get)
        return None
    
    def do_BCI(self, path, cur, get):
        if path.startswith("/block-height/"):
            blk = path[14:]
            return apiHeader(cur, blk, 'bci')
        if path.startswith("/rawblock/"):
            blkhash = path[10:75]
            if all(c in string.hexdigits for c in blkhash):
                return bciBlock(cur, blkhash)
        if path.startswith("/rawtx/"):
            txhash = path[7:72]
            if all(c in string.hexdigits for c in txhash):
                return apiTx(cur, txhash, ['raw']) if 'format' in get and get['format'][0] =='hex' else bciTx(cur, txhash)
        if path.startswith("/address/") or path.startswith("/unspent"):
            addrs = get['active'].split('|') if 'active' in get else path.split('/')[2].split(',')
            return bciAddr(cur, addrs, path.startswith("/unspent"), get)
        return None
        
    def log_message(self, format, *args):
        if cfg['debug']:
            logts( format % args )
        pass
        
# cfg file and option handling stuff

def loadcfg():
    global cfg
    try:
        with open(sys.argv[-1] if len(sys.argv) > 1 and sys.argv[-1][0] != '-' else sys.argv[0]+'.cfg') as json_file:
            cfg = json.load(json_file)
    except IOError:
        logts('No cfg file.')
    finally:
        cfg['debug'] = False
        options()

def savecfg():
    try:
        with open(sys.argv[-1] if len(sys.argv) > 1 and sys.argv[-1][0] != '-' else sys.argv[0]+'.cfg', 'w') as json_file:
            json.dump(cfg, json_file, indent=2)
    except IOError:
        logts('Cannot save cfg file')

def options():
    global cfgfile
    try:                                
        opts,args = getopt.getopt(sys.argv[1:], "hvb:p:c:d:l:s:a:w:r:u:", 
            ["help", "version", "debug", "db=", "log=", "listen=", "www=", "user=", "defaults" ])
    except getopt.GetoptError:
        usage()
    for opt,arg in opts:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-v", "--version"):
            sys.exit('sqlchain server: '+version)
        elif opt in ("-d", "--db"):
            cfg['db'] = arg
        elif opt in ("-l", "--log"):
            cfg['log'] = arg
        elif opt in ("-w", "--www"):
            cfg['www'] = arg            
        elif opt in ("-a", "--listen"):
            cfg['listen'] = arg
        elif opt in ("--defaults"):
            savecfg()
            sys.exit("%s updated" % (sys.argv[0]+'.cfg'))
        elif opt in ("--debug"):
            cfg['debug'] = True
            
def usage():
    print """Usage: %s [options...][cfg file]\nCommand options are:\n-h,--help\tShow this help info\n-v,--version\tShow version info
--defaults\tUpdate cfg and exit\nDefault files are %s.cfg .log .db
\nThese options get saved in cfg file as default.
-a,--listen\tSet host:port for web server\n-w,--www\tWeb server root directory\n-u,--user\tSet user to run as
-d,--db  \tSet mysql db connection, "host:user:pwd:dbname"\n-l,--log\tSet log file path""" % (sys.argv[0], sys.argv[0])
    sys.exit(2) 
                        
def logts(msg):
    print datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S'), msg
    sys.stdout.flush()  
    
b58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"

def is_address(addr):
    try:
        n = 0
        for c in addr:
            n = n * 58 + b58.index(c)
        btc = ('%%0%dx' % (25 << 1) % n).decode('hex')[-25:]
        return btc[-4:] == sha256(sha256(btc[:-4]).digest()).digest()[:4]
    except Exception:
        return False

def addr2pkh(v):
    long_value = 0L
    for (i, c) in enumerate(v[::-1]):
        long_value += b58.find(c) * (58**i)
    result = ''
    while long_value >= 256:
        div, mod = divmod(long_value, 256)
        result = chr(mod) + result
        long_value = div
    result = chr(long_value) + result
    nPad = 0
    for c in v:
        if c == b58[0]: nPad += 1
        else: break
    result = chr(0)*nPad + result
    return result[1:-4]

def addr2id(cur, addr):
    pkh = addr2pkh(addr)
    addr_id, = unpack('<q', sha256(pkh).digest()[:5]+'\0'*3) 
    addr_id *= 2
    if addr[0] == '3': # encode P2SH as odd id, P2PKH as even id
        addr_id += 1
    cur.execute("select id from address where id>=%s and id<%s+32 and addr=%s limit 1;", (addr_id,addr_id,pkh))
    row = cur.fetchone()
    return row[0] if row else None
    
def mkaddr(pkh, aid):
    pad = ''
    an = chr(0 if aid%2==0 else 5) + str(pkh)
    for c in an:
        if c == '\0': pad += '1'
        else: break
    num = long((an + sha256(sha256(an).digest()).digest()[0:4]).encode('hex'), 16)
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = b58[m] + out
    return pad + b58[num] + out   
    
def mkSPK(addr, addr_id):
    return ('\x19','\x76\xa9\x14%s\x88\xac'%addr) if addr_id % 2 == 0 else ('\x17','\xa9\x14%s\x87'%addr)

def decodeVarInt(v):
    if v[0] <= '\xfc':
        return unpack('<B', v[0])[0],1
    if v[0] == '\xfd':
        return unpack('<H', v[1:3])[0],3
    if v[0] == '\xfe':
        return unpack('<I', v[1:5])[0],5
    return unpack('<Q', v[1:9])[0],9
    
def encodeVarInt(v):
    if v <= 252:
        return pack('<B', v)
    if v < 2**16:
        return '\xfd' + pack('<H', v)
    if v < 2**32:
        return '\xfe' + pack('<I', v)
    return '\xff' + pack('<Q', v)

rawTxHdr = [ 'version','# inputs','# outputs', 'locktime' ]
rawCbHdr = [ 'null txid','n','coinbase size','coinbase bytes','sequence' ]
rawInHdr = [ 'in txid %d','n %d','sigScript size %d','sigScript bytes %d','sequence %d' ]
rawOutHdr = [ 'out value %d','scriptPK size %d','scriptPK bytes %d' ]

def rawHTML(out, vi, vo):
    tags = [ x for x in rawTxHdr ]
    for n in range(vo):
        tags[3:3] = [ s%(vo-n-1) for s in rawOutHdr ]
    if vi == 0:
        tags[2:2] = rawCbHdr
    else:
        for n in range(vi):
            tags[2:2] = [ s%(vi-n-1) for s in rawInHdr ]
    return "<table class='rawtx'><tr>"+"</tr><tr>".join(['<td>%s</td><td>%s</td>'%(k,v.encode('hex')) for k,v in zip(tags,out) ])+"</tr></table>"
    
def mkRawTx(cur, args, txid, txhash, txdata, blkid):
    version,locktime = unpack_from('<BI', txhash, 32)
    out = [ pack('<I', version) ]
    vi,vo = unpack('<HH', readBlob(int(txdata), 4))
    if vi == 0:
        cur.execute("select hdr from blocks where id=%s;", (blkid,))
        cb = cur.fetchone()[0][80:]
        out += [ '\x01', '\0'*32, '\xff'*4, encodeVarInt(len(cb)), cb, '\0'*4 ]
        vpos = 0
    else:
        out += encodeVarInt(vi)
        inputs = unpack('<'+'Q'*vi, readBlob(int(txdata)+4, vi*8))
        vpos = int(txdata)+4 + vi*8
        for n,in_id in enumerate(inputs):
            cur.execute("select hash from trxs where id=%s limit 1;", (in_id / 4096,))
            out += [ cur.fetchone()[0][:32], pack('<I', in_id % 4096) ]
            vsz,off = decodeVarInt(readBlob(vpos, 9))
            buf = readBlob(vpos, off+vsz+4)
            out += [ buf[:off], buf[off:off+vsz], buf[off+vsz:] ]
            vpos += off+vsz+4
    out += encodeVarInt(vo)
    for n in range(vo):
        cur.execute("select value,addr,addr_id from outputs o, address a where o.id=%s and a.id=o.addr_id limit 1;", (txid*4096 + n,))
        value,addr,addr_id = cur.fetchone()
        out += [ pack('<Q', int(value)) ]
        vsz,off = decodeVarInt(readBlob(vpos, 9))
        buf = readBlob(vpos, off+vsz)
        out += [ buf[:off], buf[off:] ] if vsz > 0 else mkSPK(addr, addr_id)
    out += [ pack('<I', locktime) ]
    return rawHTML(out, vi, vo) if 'html' in args else ''.join(out).encode('hex') 

def txh2id(txh):
    return ( unpack('<q', txh[:5]+'\0'*3)[0] >> 3 )
def bits2diff(bits):
    return (0x00ffff * 2**(8*(0x1d - 3)) / float((bits&0xFFFFFF) * 2**(8*((bits>>24) - 3))))
def gethdr(data):
    return dict(zip(['version','previousblockhash','merkleroot', 'time', 'bits', 'nonce'], unpack_from('<I32s32s3I', data)))

def apiHeader(cur, blk, args):
    if blk.isdigit():
        cur.execute("select id,hash,hdr from blocks where id=%s*4 limit 1;", (blk,))
    else:
        cur.execute("select id,hash,hdr from blocks order by id desc limit 1;")
    row = cur.fetchone()
    if row:
        hdr = gethdr(row[2])
        if 'electrum' in args:
            return { 'block_height':int(row[0])/4, 'version':hdr['version'], 'time':hdr['time'], 'bits':hdr['bits'], 'nonce':hdr['nonce'],
                     'merkle_root':hdr['merkleroot'][::-1].encode('hex'), 'prev_block_hash':hdr['previousblockhash'][::-1].encode('hex') }
        elif 'bci' in args:
            return { 'blocks': [ bciBlock(cur, row[1][::-1].encode('hex')) ] }
        else:
            return { 'blockHash': row[1][::-1].encode('hex') }
    return None
    
def apiBlock(cur, blkhash):
    data = { 'hash':blkhash, 'tx':[] }
    cur.execute("select id,hash,hdr from blocks where hash=%s limit 1;", (blkhash.decode('hex')[::-1],))
    row = cur.fetchone()
    if row:
        data['height'] = int(row[0])/4
        data['confirmations'] = cfg['block'] - data['height'] + 1
        data.update(gethdr(row[2]))
        data['previousblockhash'] = data['previousblockhash'][::-1].encode('hex')
        data['merkleroot'] = data['merkleroot'][::-1].encode('hex')
        data['difficulty'] = bits2diff(data['bits'])
        data['bits'] = '%08x' % data['bits']
        data['reward'] = float((50 * 100000000) >> (data['height'] / 210000))/1e8
        data['isMainChain'] = True
        cur.execute("select hash from trxs where block_id=%s;", (row[0],))
        for tx in cur:
            data['tx'].append(tx[0][:32][::-1].encode('hex'))
        cur.execute("select hash from blocks where id=%s*4 limit 1;", (data['height']+1,))
        row = cur.fetchone()
        if row:
            data['nextblockhash'] = row[0][::-1].encode('hex')
        return data
    return None
                
def apiAddr(cur, addrs, args, get={}):
    data = []
    for addr in addrs:
        if is_address(addr):
            addr_id = addr2id(cur, addr)
            if addr_id:
                if 'utxo' in args:
                    data.append(addrUTXOs(cur, addr_id, addr))
                else:
                    data.append(addrTXs(cur, addr_id, addr, args, 'noTxList' not in get or get['noTxList'][0] == '0'))
    return data if len(data) != 1 else data[0]
    
                            
def addrTXs(cur, addr_id, addr, args, incTxs):
    txs = []
    sums = [[0,0],[0,0]]
    untxs = 0
    cur.execute("select value,t.id,tx_id,left(hash,32),block_id from trxs t left join outputs o on t.id=floor(o.id/4096) or t.id=o.tx_id where addr_id=%s order by block_id;", (addr_id,))
    for tx in cur:
        uncfmd = 1 if tx[4] == 0 else 0
        untxs += uncfmd
        spent = 1 if tx[1] == tx[2] else 0
        sums[uncfmd][spent] += tx[0]
        
        txhash = tx[3][::-1].encode('hex')
        if incTxs and txhash not in txs:
            txs.append(txhash)
            
    if 'balance' in args:
        return int(sums[0][0]-sums[0][1])
    if 'unconfirmedBalance' in args:
        return int(sums[1][0]-sums[1][1])
    if 'totalReceived' in args:
        return int(sums[0][0])
    if 'totalSent' in args:
        return int(sums[0][1])
    
    return { 'addStr':addr, 'balanceSat':int(sums[0][0]-sums[0][1]), 'balance':float(sums[0][0]-sums[0][1])/1e8, 'totalReceivedSat':int(sums[0][0]), 
             'totalReceived': float(sums[0][0])/1e8, 'totalSentSat':int(sums[0][1]), 'totalSent':float(sums[0][1])/1e8, 
             'unconfirmedBalanceSat':int(sums[1][0]-sums[1][1]), 'unconfirmedBalance':float(sums[1][0]-sums[1][1])/1e8,
             'txApperances':len(txs)-untxs, 'transactions':txs, 'unconfirmedTxApperances':untxs }   

def addrUTXOs(cur, addr_id, addr):
    data = []
    cur.execute("select value,o.id,left(t.hash,32),block_id/4,hdr from outputs o, trxs t, blocks b where tx_id is null and addr_id=%s and t.id=floor(o.id/4096) and b.id=t.block_id;", (addr_id,))
    for tx in cur:
        data.append({ 'address':addr, 'txid':tx[2][::-1].encode('hex'), 'vout':int(tx[1])%4096, 'amount':float(tx[0])/1e8, 
                      'confirmations':cfg['block']-int(tx[3])+1, 'ts':gethdr(tx[4])['time'] })
    return data

def addrHistory(cur, addr, args):
    txt = ''
    data = { 'cfmd':0, 'uncfmd':0 } if 'balance' in args else { 'txs':[] }
    addr_id = addr2id(cur, addr)
    if addr_id:
        cur.execute("select value,t.id,o.tx_id,left(hash,32),block_id/4,o.id%%4096 from outputs o, trxs t where addr_id=%s and (t.id=floor(o.id/4096) or t.id=o.tx_id) order by block_id;", (addr_id,))
        for tx in cur:
            value = int(tx[0])
            if 'balance' in args:
                if tx[4] == 0:
                    data['uncfmd'] += value if tx[1] == tx[2] else -value
                else:
                    data['cfmd'] += value if tx[1] == tx[2] else -value
            elif 'utxo' in args and not tx[2]:
                tmp = { 'tx_hash':tx[3][::-1].encode('hex'), 'height':int(tx[4]), 'value':value, 'n':int(tx[5]) }
            else:
                tmp = { 'tx_hash':tx[3][::-1].encode('hex'), 'height':int(tx[4]) }
            if 'status' in args:
                txt += tmp['tx_hash'] + ":%d:" % tmp['height']
            elif ('uncfmd' not in args or tmp['height'] == 0) and 'balance' not in args:
                data['txs'].append(tmp)
    return (sha256(txt).digest().encode('hex') if txt else None) if 'status' in args else data
    
def apiTx(cur, txhash, args):
    if 'output' in args:
        return txoAddr(cur, txhash, args[-1])
    data = { 'txid':txhash }
    txh = txhash.decode('hex')[::-1]
    cur.execute("select id,hash,txdata,block_id from trxs where id>=%s and left(hash,32)=%s limit 1;", (txh2id(txh), txh))
    row = cur.fetchone()
    if row:
        if [i for i in ['raw','html'] if i in args]:
            return mkRawTx(cur, args, *row)
        data['confirmations'] = cfg['block'] - row[3]/4 + 1
        data['version'],data['locktime'] = unpack_from('<BI', row[1], 32)
        data['valueIn'],data['vin'] = apiInputs(cur, row[3]/4, int(row[2]))
        data['valueOut'],data['vout'] = apiOutputs(cur, int(row[0]))
        data['fees'] = round(data['valueIn'] - data['valueOut'],8)
        cur.execute("select hash,hdr from blocks where id=%s limit 1;", (row[3],))
        row = cur.fetchone()
        if row:
            data['blockhash'] = row[0][::-1].encode('hex')
            data['time'] = data['blocktime'] = gethdr(row[1])['time']
        if 'coinbase' in data['vin'][0]:
            del data['valueIn']
            del data['fees']
            data['isCoinBase'] = True
        return data
    return None
        
def apiInputs(cur, height, blob):
    total = 0
    data = []
    ins,_ = unpack('<HH', readBlob(blob, 4))
    if ins == 0:
        cur.execute("select hdr from blocks where id=%s*4;", (height,))
        data.append({ 'n':0, 'coinbase':cur.fetchone()[0][80:].encode('hex') })
    else:
        inputs = unpack('<'+'Q'*ins, readBlob(blob+4, ins*8))
        for n,in_id in enumerate(inputs):
            cur.execute("select value,addr,addr_id,left(hash,32) from outputs o, address a, trxs t where o.id=%s and a.id=o.addr_id and t.id=%s limit 1;", (in_id,in_id/4096))
            row = cur.fetchone()
            if row:
                btc = float(row[0])/1e8
                data.append({ 'n':n, 'vout':in_id%4096, 'value':round(btc,8), 'valueSat':int(row[0]), 'txid':row[3][::-1].encode('hex'), 'addr':mkaddr(row[1],row[2]) })
                total += btc
    return round(total,8),data
    
def apiOutputs(cur, txid):
    total = 0
    data = []
    cur.execute("select o.id%%4096,value,addr,addr_id,o.tx_id,o.id from outputs o, address a where o.id>=%s*4096 and o.id<%s*4096 and a.id=o.addr_id;", (txid,txid+1))
    outs = cur.fetchall()
    for out in outs:
        btc = float(out[1])/1e8
        vo = { 'n':int(out[0]), 'value':"%1.8f" % btc }
        vo['scriptPubKey'] = { 'addresses':[ mkaddr(out[2],out[3]) ] }
        if out[4]:
            vo.update(apiSpent(cur, int(out[4]), int(out[5])))
        total += btc
        data.append(vo)
    return round(total,8),data
    
def apiSpent(cur, txid, outid):
    cur.execute("select txdata,left(t.hash,32),hdr from trxs t, blocks b where t.id=%s and b.id=t.block_id;", (txid,))
    row = cur.fetchone()
    if row:
        ins,outs = unpack('<HH', readBlob(int(row[0]), 4))
        inputs = unpack('<'+'Q'*ins, readBlob(int(row[0])+4, ins*8))
        return { 'spentTxId':row[1][::-1].encode('hex'), 'spentIndex':inputs.index(outid), 'spentTs':gethdr(row[2])['time'] }
    return {}

def txoAddr(cur, txid, n):
    txh = txid.decode('hex')[::-1]
    cur.execute("select addr,addr_id from outputs o, address a where o.id>=%s and a.id=o.addr_id limit 1;", (txh2id(txh)*4096+int(n),))
    row = cur.fetchone()
    return mkaddr(row[0],row[1]) if row else None
        
def bciBlock(cur, blkhash):
    data = { 'hash':blkhash, 'tx':[] }
    cur.execute("select id,hash,hdr from blocks where hash=%s limit 1;", (blkhash.decode('hex')[::-1],))
    row = cur.fetchone()
    if row:
        data['height'] = int(row[0])/4
        data['block_index'] = int(row[0])
        hdr = gethdr(row[2])
        data['ver'] = hdr['version']
        data['time'] = hdr['time']
        data['prev_block'] = hdr['previousblockhash'][::-1].encode('hex')
        data['mrkl_root'] = hdr['merkleroot'][::-1].encode('hex')
        data['nonce'] = hdr['nonce']
        data['bits'] = hdr['bits']
        data['main_chain'] = True
        cur.execute("select left(hash,32) from trxs where block_id=%s;", (row[0],))
        txs = cur.fetchall()
        for tx in txs:
            data['tx'].append(bciTx(cur, tx[0][::-1].encode('hex')))
        data['n_tx'] = len(data['tx'])
        data['fee'] = -(5000000000 >> (data['height'] / 210000))
        for out in data['tx'][0]['out']:
            data['fee'] += out['value']
        return data
    return None

def bciAddr(cur, addrs, utxo, get={}):
    data,tops = [],[]
    single = (len(addrs) == 1)
    for addr in addrs:
        if is_address(addr):
            addr_id = addr2id(cur, addr)
            if addr_id:
                if utxo:
                    data.extend(addrUTXOs(cur, addr_id, addr))
                else:
                    hdr,txs = bciAddrTXs(cur, addr_id, addr, get)
                    data.extend(txs)
                    tops.append(hdr)
    if not utxo and single:
        tops[0].update({'txs':data})
    return { 'unspent_outputs':data } if utxo else tops[0] if single else { 'addresses':tops, 'txs':data }

def bciAddrTXs(cur, addr_id, addr, args):
    return {'recd':0},['asasas']
    
def bciTx(cur, txhash):
    data = { 'hash':txhash }
    txh = txhash.decode('hex')[::-1]
    cur.execute("select id,hash,txdata,block_id from trxs where id>=%s and left(hash,32)=%s limit 1;", (txh2id(txh), txh))
    row = cur.fetchone()
    if row:
        data['tx_index'] = int(row[0])
        data['block_height'] = row[3]/4
        data['ver'],data['lock_time'] = unpack_from('<BI', row[1], 32)
        data['inputs'] = bciInputs(cur, row[3]/4, int(row[2]))
        data['vin_sz'] = len(data['inputs'])
        data['out'] = bciOutputs(cur, int(row[0]))
        data['vout_sz'] = len(data['out'])
        cur.execute("select hdr from blocks where id=%s limit 1;", (row[3],))
        data['time'] = gethdr(cur.fetchone()[0])['time']
        return data
    return None

def bciInputs(cur, height, blob):
    data = []
    ins, = unpack('<H', readBlob(blob, 2))
    if ins == 0:
        data.append({ })
    else:
        inputs = unpack('<'+'Q'*ins, readBlob(blob+4, ins*8))
        for n,in_id in enumerate(inputs):
            cur.execute("select value,addr,addr_id from outputs o, address a where o.id=%s and a.id=o.addr_id limit 1;", (in_id,))
            row = cur.fetchone()
            if row:
                data.append({ 'prev_out':{ 'spent':True, 'type':0, 'n':in_id%4096, 'value':int(row[0]), 
                              'tx_index':in_id/4096, 'addr':mkaddr(row[1],row[2]) }})
    return data
    
def bciOutputs(cur, txid):
    data = []
    cur.execute("select o.id%%4096,value,addr,addr_id,o.tx_id from outputs o, address a where o.id>=%s*4096 and o.id<%s*4096 and a.id=o.addr_id;", (txid,txid+1))
    outs = cur.fetchall()
    for out in outs:
        vo = { 'n':int(out[0]), 'value':int(out[1]), 'addr':mkaddr(out[2],out[3]), 'type':0, 'tx_index':txid }
        if out[4]:
            vo['spent'] = True
        data.append(vo)
    return data
    
def hdrChunk(cur, chunk):
    pass

def apiStatus(cur, get):
    status = {}
    cur.execute("show table status;")
    for row in cur:
        status.update({ row[0]:{ 'rows':row[4], 'data GB':float("%.3f"%float(row[6]/1e9)), 'idx GB':float("%.3f"%float(row[8]/1e9)), 'total GB':float("%.3f"%float(row[6]/1e9+row[8]/1e9)), 'total bytes':row[6]+row[8] }})
    cur.execute("select count(*) from address where id%2=1;")
    status['address']['multi-sigs'] = cur.fetchone()[0]
    #cur.execute("select count(*) from address where  cast(conv(hex(reverse(unhex(substr(sha2(addr,0),1,10)))),16,10)*2 as unsigned) != id;")
    #status['address']['id-collisions'] = cur.fetchone()[0]
    #cur.execute("select count(*) from trxs where  strcmp(reverse(unhex(hex(id*8))), left(hash,5)) > 0;")
    #status['trxs']['id-collisions'] = cur.fetchone()[0] 
    cur.execute("select count(*) from outputs where addr_id=0;")
    status['outputs']['non-standard'] = cur.fetchone()[0] 
    cur.execute("select count(*) from outputs where tx_id is null;")
    status['outputs']['unspent'] = cur.fetchone()[0]
    status['updated'] = datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')
    return status
    
def readBlob(pos, sz):
    if sz != 0:
        with open('/var/data/blobs.dat', 'rb') as blob:
            blob.seek(pos)
            return blob.read(sz)
    return None
        
def sigterm_handler(_signo, _stack_frame):
    logts("Shutting down.")
    sys.exit(0)
    
def drop2user():
    global drop
    if ('user' in cfg) and (cfg['user'] != '') and (os.getuid() == 0):
        #drop.wait()
        uid = pwd.getpwnam(cfg['user']).pw_uid
        os.setgroups([])
        os.setgid(uid)
        os.setuid(uid)
        os.umask(077)      
    
if __name__ == '__main__':
    
    loadcfg()
        
    if not cfg['debug']:
        sys.stdout = open(cfg['log'], 'a')
        signal.signal(signal.SIGTERM, sigterm_handler)
    
    mimetypes.init()
    mimetypes.add_type('application/x-font-woff', '.woff')
    mimetypes.add_type('application/x-font-woff2', '.woff2')
    mimetypes.add_type('application/x-font-woff', '.ttf')
    
    host,port = cfg['listen'].split(':')
    server = ThreadedHTTPServer((host, int(port)), WebHandler)
    if ('ssl' in cfg) and (cfg['ssl'] != ''):
        server.socket = ssl.wrap_socket (server.socket, certfile=cfg['ssl'], server_side=True)
    drop2user()
    
    logts("Starting on %s" % cfg['listen'])
    while True:
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            sys.exit(0)
        except:
            logts("Uknown exception")
            pass


        
