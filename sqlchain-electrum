#!/usr/bin/env python

import os, sys, pwd, getopt, datetime, time, cgi, urlparse, signal, string
from time import sleep
import ssl, json, gevent
from bitcoinrpc.authproxy import AuthServiceProxy
from hashlib import sha256
from struct import pack, unpack, unpack_from
from gevent import socket
from gevent.server import StreamServer
from gevent.queue import Queue
from gevent import monkey; monkey.patch_socket()
from urllib2 import urlopen, URLError

srvinfo = { 'version':"1.0", 'banner':'', 'block':0, 'header':{} }
cfg = { 'log':sys.argv[0]+'.log', 'listen':'localhost:8081', 'www':'www', 'api':'http://localhost:8085/api',
        'rpc':'http://chris:cZ9k7ca22UIwPobTGQUm@cubian:8332' }
subs = { 'numblocks':{}, 'headers':{}, 'address':{}, '_ip':{} }
reqQ,respQ = Queue(),Queue()

def ReqHandler():
    while True:
        resp = None
        fp,req = reqQ.get()
        print 'REQ', req
        args = req['method'].split('.')
        val = req['params'][0] if len(req['params']) > 0 else 1
        if args[-1] == 'subscribe':
            if args[1] in subs and not getSubs(args[1], val, fp):
                addSub(args[1], val, fp)
            respSub(args[1], fp, req)
        elif args[0] == 'server':
            respQ.put((fp, req['id'], srvinfo[args[1]] if args[1] in srvinfo else {}))
        elif req['method'] in reqFuncs:
            gevent.spawn(reqFuncs[req['method']], fp, req)
        else:
            logts("Bad Req %s:%d - %s" % (subs['_ip'][fp][0]+(req['method'],)))

def RespHandler():
    while True:
        fp,reqid,resp = respQ.get()
        resp = json.dumps({ 'id':reqid, 'result':resp } if resp == None or not 'error' in resp else { 'id':reqid,'error':resp['error'] })
        print "RESP", reqid, resp
        fp.write(resp+'\n')
        fp.flush()
            
def TcpHandler(sock, address):
    fp = sock.makefile()
    addSub('_ip', address, fp)
    while True:
        line = fp.readline()
        if line:
            reqQ.put((fp, json.loads(line)))
        else:
            break
    delSubs(fp)
    sock.shutdown(socket.SHUT_WR)
    sock.close()

def getSubs(sub, val, key=None):
    if key:
        return key in subs[sub] and val in subs[sub][key]
    keys = []
    for k in subs[sub]:
        if val in subs[sub][k]:
            fps.append(k)
    return fps

def addSub(sub, val, key):
    if key in subs[sub]:
        subs[sub][key].append(val)
    else:
        subs[sub][key] = [val]
        
def delSubs(key):
    for sub in subs:
        if key in subs[sub]:
            del subs[sub][key]
            
def respSub(to, fp, req):
    if to == 'address':
        gevent.spawn(addrHistory, fp, req, '/status')
    elif to == 'numblocks':
        respQ.put((fp, req['id'], srvinfo['block']))
    elif to == 'headers':
        respQ.put((fp, req['id'], srvinfo['header']))
    else:
        respQ.put((fp, req['id'], []))
            
def addrHistory(fp, req, args=''):
    data = apicall('/history/'+req['params'][0] + args)
    respQ.put((fp, req['id'], data if args else data['txs'] if len(data['txs']) > 0 else None ))
        
def addrBalance(fp, req):
    respQ.put((fp, req['id'], apicall('/history/'+req['params'][0]+'/balance')))
    
def addrMemPool(fp, req):
    respQ.put((fp, req['id'], apicall('/history/'+req['params'][0]+'/uncfmd')))
    
def addrUnspent(fp, req):
    respQ.put((fp, req['id'], apicall('/history/'+req['params'][0]+'/utxo')))
    
def addrProof(fp, req):
    pass
    
def blkHeader(fp, req):
    respQ.put((fp, req['id'], apicall('/block-index/'+req['params'][0]+'/electrum') ))
    
def blkChunk(fp, req):
    respQ.put((fp, req['id'], getChunk(int(req['params'][0]).encode('hex') ))
    
def utxoAddress(fp, req):
    respQ.put((fp, req['id'], apicall('/tx/'+req['params'][0]+'/output/%d' % req['params'][1]) ))
    
def txGet(fp, req):
    respQ.put((fp, req['id'], apicall('/tx/'+req['params'][0]+'/raw') ))
    
def txSend(fp, req):
    rpc = AuthServiceProxy(cfg['rpc'])
    txid = rpc.sendrawtransaction(*req['params'])
    logts("Tx Sent: %s" % txid)
    respQ.put((fp, req['id'], txid ))
    
def txMerkle(fp, req):
    pass
    
def feeEstimate(fp, req):
    rpc = AuthServiceProxy(cfg['rpc'])
    fee = rpc.estimatefee(int(req['params'][0]))
    respQ.put((fp, req['id'], fee ))

reqFuncs = { 'blockchain.address.get_history':addrHistory, 'blockchain.address.get_balance':addrBalance, 
             'blockchain.address.get_mempool':addrMemPool, 'blockchain.address.get_proof':addrProof,
             'blockchain.address.listunspent':addrUnspent, 'blockchain.utxo.get_address':utxoAddress,
             'blockchain.block.get_header':blkHeader,      'blockchain.block.get_chunk':blkChunk, 
             'blockchain.transaction.broadcast':txSend,    'blockchain.transaction.get_merkle':txMerkle,
             'blockchain.transaction.get':txGet,           'blockchain.estimatefee':feeEstimate }
        
# cfg file and option handling stuff

def loadcfg():
    global cfg
    try:
        with open(sys.argv[-1] if len(sys.argv) > 1 and sys.argv[-1][0] != '-' else sys.argv[0]+'.cfg') as json_file:
            cfg = json.load(json_file)
    except IOError:
        logts('No cfg file.')
    finally:
        cfg['debug'] = False
        options()

def savecfg():
    try:
        with open(sys.argv[-1] if len(sys.argv) > 1 and sys.argv[-1][0] != '-' else sys.argv[0]+'.cfg', 'w') as json_file:
            json.dump(cfg, json_file, indent=2)
    except IOError:
        logts('Cannot save cfg file')

def options():
    global cfgfile
    try:                                
        opts,args = getopt.getopt(sys.argv[1:], "hvb:p:c:d:l:s:a:w:r:u:", 
            ["help", "version", "debug", "db=", "log=", "listen=", "www=", "user=", "defaults" ])
    except getopt.GetoptError:
        usage()
    for opt,arg in opts:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-v", "--version"):
            sys.exit('sqlchain server: '+version)
        elif opt in ("-d", "--db"):
            cfg['db'] = arg
        elif opt in ("-l", "--log"):
            cfg['log'] = arg
        elif opt in ("-w", "--www"):
            cfg['www'] = arg            
        elif opt in ("-a", "--listen"):
            cfg['listen'] = arg
        elif opt in ("--defaults"):
            savecfg()
            sys.exit("%s updated" % (sys.argv[0]+'.cfg'))
        elif opt in ("--debug"):
            cfg['debug'] = True
            
def usage():
    print """Usage: %s [options...][cfg file]\nCommand options are:\n-h,--help\tShow this help info\n-v,--version\tShow version info
--defaults\tUpdate cfg and exit\nDefault files are %s.cfg .log .db
\nThese options get saved in cfg file as default.
-a,--listen\tSet host:port for web server\n-w,--www\tWeb server root directory\n-u,--user\tSet user to run as
-d,--db  \tSet mysql db connection, "host:user:pwd:dbname"\n-l,--log\tSet log file path""" % (sys.argv[0], sys.argv[0])
    sys.exit(2) 
                        
def logts(msg):
    print datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S'), msg
    sys.stdout.flush()  
    
def apicall(url):
    try:
        data = urlopen(cfg['api']+url).read()
        #print '---', data
    except URLError:
        logts("Error: sqlchain-api must be at %s" % cfg['api'])
        return None
    return json.loads(data)

def getChunk(chunk):
    with open('/var/data/hdrs.dat', 'rb') as f:
        f.seek(chunk*80*2016)
        return f.read(80*2016)

def sigterm_handler(_signo, _stack_frame):
    logts("Shutting down.")
    sys.exit(0)
    
def drop2user():
    global drop
    if ('user' in cfg) and (cfg['user'] != '') and (os.getuid() == 0):
        #drop.wait()
        uid = pwd.getpwnam(cfg['user']).pw_uid
        os.setgroups([])
        os.setgid(uid)
        os.setuid(uid)
        os.umask(077)      
    
if __name__ == '__main__':
    
    loadcfg()
    
    with open('electrum.banner') as f:
        srvinfo['banner'] = f.read()
        
    if not cfg['debug']:
        sys.stdout = open(cfg['log'], 'a')
        signal.signal(signal.SIGTERM, sigterm_handler)
    
    hdr = apicall('/block-index/latest/electrum')
    if not hdr:
        sys.exit("Error: sqlchain-api must be at %s" % cfg['api'])
    srvinfo['block'],srvinfo['header'] = hdr['block_height'],hdr
    
    gevent.spawn(ReqHandler)
    gevent.spawn(RespHandler)

    logts("Starting on %s" % cfg['listen'])
    while True:
        try:
            host,port = cfg['listen'].split(':')
            cert = {'certfile':cfg['ssl']} if ('ssl' in cfg) and (cfg['ssl'] != '') else {}
            server = StreamServer((host, int(port)), TcpHandler, **cert)
            server.serve_forever()
        except KeyboardInterrupt:
            sys.exit(0)
        #except:
            #logts("Uknown exception")
            #pass
            
        
