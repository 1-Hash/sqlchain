#!/usr/bin/env python
#
#   sqlchaind - daemon to update sql blockchain db
#


import os, sys, socket, datetime, time
import select, termios, fcntl
from bitcoinrpc.authproxy import AuthServiceProxy
from struct import pack, unpack, unpack_from
import threading, hashlib
import MySQLdb as db

cfg = { 'log':sys.argv[0]+'.log', 'db':'localhost:btc:test623btc:bitcoin', 'rpc':'http://chris:cZ9k7ca22UIwPobTGQUm@cubian:8332' } 

state = { 'pause':False }
b58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
blockQ = []
memPool = set()
done = threading.Event()

def mkpkh(pk):
    rmd = hashlib.new('ripemd160')
    rmd.update(hashlib.sha256(pk).digest())
    return rmd.digest()

def addr2pkh(v):
    long_value = 0L
    for (i, c) in enumerate(v[::-1]):
        long_value += b58.find(c) * (58**i)
    result = ''
    while long_value >= 256:
        div, mod = divmod(long_value, 256)
        result = chr(mod) + result
        long_value = div
    result = chr(long_value) + result
    nPad = 0
    for c in v:
        if c == b58[0]: nPad += 1
        else: break
    result = chr(0)*nPad + result
    return result[1:-4]

def mkaddr(pkh, ver=0):
    pad = ''
    an = chr(ver) + str(pkh)
    for c in an:
        if c == '\0': pad += '1'
        else: break
    num = long((an + hashlib.sha256(hashlib.sha256(an).digest()).digest()[0:4]).encode('hex'), 16)
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = b58[m] + out
    return pad + b58[num] + out    
   
def IsKbdCmd(cur):
    while True:
        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            key = sys.stdin.read(1)
            if key == 'x':
                return False
            elif key == ' ':
                state['pause'] = not state['pause']
                if state['pause']:
                    print "\n--- press space to resume ---"
            elif key == 's':
                cur.execute('select count(*) from trxs')
                print "\nTx: {:,}".format(cur.fetchone()[0])
                cur.execute('select count(*) from outputs')
                outs = cur.fetchone()[0]
                cur.execute('select count(*) from outputs where sig != 0')
                spent = cur.fetchone()[0]
                print "TxO: {:,}\nUTxO: {:,} - {:.0%}".format(outs, outs-spent, float(outs-spent)/outs)
                cur.execute('select count(*) from address')
                print "Addr: {:,}".format(cur.fetchone()[0])
                #print "Size: %4.1f MB" % (os.path.getsize('btc.db')/1e6)
                print
            elif key == 'b':
                import shutil
                print "\n--- backing up db ---"
                shutil.copy2('btc.db', 'btc.db.bak')
            
        if not state['pause']:
            return True
        time.sleep(0.5)

def getBlocks(blk):
    rpc = AuthServiceProxy(cfg['rpc'])
    blkChkPoint = rpc.getblockcount() # prevent wasteful rpc calls when known redundant
    sql = db.connect(*cfg['db'].split(':'))
    cur = sql.cursor()
    if blk == 0:
        cur.execute('select ifnull(max(id)/4, -1) from blocks')
        blk = int(cur.fetchone()[0] + 1)
    startblk = blk
    while IsKbdCmd(cur):
        if len(blockQ) >= 8:
            time.sleep(0.01)
            continue
        if blk > blkChkPoint and blk > rpc.getblockcount():
            waitfrom = time.time()
            checkMemPool(cur, rpc)
            time.sleep(10 - (time.time() - waitfrom))
            continue
        netstart = time.time()
        blkhash = rpc.getblockhash(blk)
        if blkhash:
            data = decodeBlock(rpc.getblock(blkhash, False).decode('hex'))
            if data: 
                data['height'] = blk
                data['rpc'] = time.time()-netstart
                blockQ.append(data)
                blk += 1
            else: break
    return blk - startblk
        
def processBlocks():
    sql = db.connect(*cfg['db'].split(':'))
    cur = sql.cursor()
    while not done.isSet():
        if len(blockQ) > 0:
            print len(blockQ),
            insertBlock(cur, blockQ.pop(0))
        else:
            time.sleep(0.01)

def checkMemPool(cur, rpc):
    if len(memPool) == 0:
        sync_id = 0
        cur.execute("delete from mempool;")
    else:
        cur.execute("select max(sync_id) from mempool;")
        sync_id = cur.fetchone()[0]
    trxs = rpc.getrawmempool()
    for tx in trxs:
        if tx not in memPool:
            memPool.add(tx)
            insertTxMemPool(rpc.getrawtransaction(tx,1), sync_id+1)           

def decodeBlock(data):
    hdr = ['version','previousblockhash','merkleroot', 'time', 'bits', 'nonce']
    hv = unpack_from('<I32s32s3I', data)
    block = dict(zip(hdr,hv))
    block['hdr'] = data[:80]
    block['hash'] = hashlib.sha256(hashlib.sha256(block['hdr']).digest()).digest()
    block['bits'] = '%08x' % block['bits'] 
    txcnt,off = decodeVarInt(data[80:89])
    off += 80
    block['tx'] = []
    while txcnt > 0:
        tx,toff = decodeTx(data[off:])
        block['tx'].append(tx)
        off += toff
        txcnt -= 1
    block['height'] = 0
    block['coinbase'] = block['tx'][0]['vin'][0]['coinbase']
    if block['version'] > 1 and block['height'] >= 227836 and block['coinbase'][0] == '\x03':
        block['height'] = unpack('<I', block['coinbase'][1:4]+'\0')[0]
        #print 'coinbase height', block['height'], block['tx'][0]['vin'][0]['coinbase'][1:4].encode('hex')
    return block

def decodeTx(data):
    vers, = unpack_from('<I', data)
    tx = { 'version': vers, 'vin':[], 'vout':[] }
    vicnt,off = decodeVarInt(data[4:13])
    off += 4
    while vicnt > 0:
        txid,vout = unpack_from('<32sI', data, off)
        sigsz,soff = decodeVarInt(data[off+36:off+36+9])
        off += soff+36
        seq, = unpack_from('<I', data, off+sigsz)
        if txid == '\0'*32 and vout == 0xffffffff: 
            tx['vin'].append({'coinbase':data[off:off+sigsz], 'sequence':seq })
        else:
            tx['vin'].append({'txid':txid, 'vout':vout, 'scriptSig':data[off:off+sigsz], 'sequence':seq })
        off += sigsz+4
        vicnt -= 1
    vocnt,voff = decodeVarInt(data[off:off+9])
    off += voff
    n = 0
    while n < vocnt:
        value, = unpack_from('<Q', data, off)
        pksz,soff = decodeVarInt(data[off+8:off+8+9])
        off += 8+soff
        tx['vout'].append({'value':value, 'n':n, 'scriptPubKey':decodeScriptPK( data[off:off+pksz] ) }) 
        off += pksz
        n += 1
    tx['locktime'], = unpack_from('<I', data, off)
    tx['txid'] = hashlib.sha256(hashlib.sha256(data[:off+4]).digest()).digest()
    return tx,off+4

def decodeScriptPK(data):
    if len(data) > 1:
        if data[:3] == '\x76\xa9\x14' and data[23:25] == '\x88\xac': # P2PKH
            return { 'type':'p2pkh', 'data':'', 'addr':mkaddr(data[3:23]) };
        if data[:2] == '\xa9\x14' and data[22] == '\x87': # P2SH
            return { 'type':'p2sh', 'data':'', 'addr':mkaddr(data[2:22],5)};
        if data[0] == '\x41' and data[66] == '\xac': # P2PK
            return { 'type':'p2pk', 'data':data, 'addr':mkaddr(mkpkh(data[1:66])) };
        if data[0] == '\x21' and data[34] == '\xac': # P2PK (compressed key)
            return { 'type':'p2pk', 'data':data, 'addr':mkaddr(mkpkh(data[1:66])) };
        if len(data) <= 41 and data[0] == '\x6a': # NULL
            return { 'type':'null', 'data':data };
    return { 'type':'other', 'data':data } # other, non-std

def decodeVarInt(v):
    if v[0] <= '\xfc':
        return unpack('<B', v[0])[0],1
    if v[0] == '\xfd':
        return unpack('<H', v[1:3])[0],3
    if v[0] == '\xfe':
        return unpack('<I', v[1:5])[0],5
    return unpack('<Q', v[1:9])[0],9
    
def encodeVarInt(v):
    if v <= 252:
        return pack('<B', v)
    if v < 2**16:
        return '\xfd' + pack('<H', v)
    if v < 2**32:
        return '\xfe' + pack('<I', v)
    return '\xff' + pack('<Q', v)
    
def insertAddress(cur, addr):
    pkh = addr2pkh(addr)
    addr_id, = unpack('<q', hashlib.sha256(pkh).digest()[:5]+'\0'*3) 
    addr_id *= 2
    if addr[0] == '3': # encode P2SH as odd id, P2PKH as even id
        addr_id += 1
    start_id = addr_id
    while True:    
        cur.execute("select addr from address where id=%s", (addr_id,))
        row = cur.fetchone()
        if row == None:
            cur.execute("insert into address (id,addr) values(%s,%s)", (addr_id, pkh))
            if addr_id != start_id:
                print '!', # collision
            return addr_id
        elif str(row[0]) == str(pkh):
            return addr_id
        addr_id += 2

def findTx(cur, txhash, mkNew=False, limit=32):
    tx_id, = unpack('<q', txhash[:5]+'\0'*3) 
    tx_id >>= 3    
    limit_id = tx_id+limit
    start_id = tx_id
    while True:
        cur.execute("select hash from trxs where id=%s", (tx_id,))
        row = cur.fetchone()
        if row == None:
            if mkNew:
                if tx_id != start_id:
                    print '#', # collision
                return tx_id
            return None
        if str(row[0][:32]) == txhash:
            return tx_id
        if tx_id > limit_id:
            return None
        tx_id += 1
        
def insertTxMemPool(tx, sync_id):
    tx_id = findTx(cur, tx['txid'], mkNew=True)
    if tx_id == None:
        ins,outs = InsertTx(cur, tx, tx_id, 0)
        cur.executemany("insert ignore into outputs (id,addr_id,value) values(%s,%s,%s)", outs)
        cur.executemany("update outputs set tx_id=%s where id=%s limit 1", ins)
    cur.execute("insert ignore into mempool (id,sync_id) values(%s,%s);", (tx_id, sync_id))

def insertTx(cur, tx, tx_id, blk_id):
    ins,outs = [],[]
    inputs,txdata = '','' 
    for vin in tx['vin']:
        if 'coinbase' not in vin and 'txid' in vin:
            in_id = findTx(cur, vin['txid'])
            if in_id and vin['vout'] < 4096:
                in_id = (in_id<<12) + vin['vout']
                ins.append((tx_id, in_id))
                inputs += pack('<Q', in_id)
                txdata += encodeVarInt(len(vin['scriptSig'])) + vin['scriptSig'] + pack('<I', vin['sequence'])
                        
    for vout in tx['vout']:
        addr_id = insertAddress(cur, vout['scriptPubKey']['addr']) if 'addr' in vout['scriptPubKey'] else 0
        if vout['n'] < 4096:
            outs.append( ( (tx_id<<12) + vout['n'], addr_id, vout['value'] ) )
            txdata += encodeVarInt(len(vout['scriptPubKey']['data'])) + vout['scriptPubKey']['data']
                
    txdata = pack('<HH', len(inputs)/8, len(tx['vout'])) + inputs + txdata
    cur.execute("insert ignore into trxs (id,hash,txdata,block_id) values(%s,%s,%s,%s)", ( tx_id, tx['txid'] + pack('<BI', tx['version']&0xFF, tx['locktime']), insertBlob(txdata), blk_id ))    
    return ins,outs
    
def insertBlock(cur, data):
    print "block", data['height'], 
    blkstart = time.time()
    blk_id = data['height']*4
    ins,outs = [],[]
    for tx in data['tx']:
        tx_id = findTx(cur, tx['txid'], mkNew=True)
        if tx_id in memPool:
            memPool.remove(tx['txid'])
            cur.execute("delete from mempool where id=%s limit 1;", (tx_id,))
            
        xi,xo = insertTx(cur, tx, tx_id, blk_id)
        ins.extend(xi)
        outs.extend(xo)
        
    cur.executemany("insert ignore into outputs (id,addr_id,value) values(%s,%s,%s)", outs)
    cur.executemany("update outputs set tx_id=%s where id=%s limit 1", ins)
    cur.execute("insert ignore into blocks (id,hash,coinbase) values (%s,%s,%s);", (blk_id, data['hash'], data['coinbase']))
    puthdr(data['height'], data['hdr'])
    blktime = time.time() - blkstart
    print "[ %4d txs - %s - %03.0f/%03.0f ]" % ( len(data['tx']), datetime.datetime.fromtimestamp(data['time']).strftime('%d-%m-%Y'), data['rpc']*1000, blktime*1000)

def insertBlob(data):
    if len(data) == 0:
        return 0
    with open('/var/data/blobs.dat', 'r+b') as blob:
        blob.seek(0,2)
        pos = blob.tell()
        blob.write(data)
    return pos
    
def puthdr(blk, hdr):
    with open('/var/data/hdrs.dat', 'r+b') as f:
        f.seek(blk*80)
        f.write(hdr)
        f.flush()
    
if __name__ == '__main__':

    blk = 0
    if len(sys.argv) > 1:
        blk = int(sys.argv[1])

    # set console for non-blocking key input
    fd = sys.stdin.fileno()
    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)
    
    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)
    
    workstart = time.time()
    blkwrk = threading.Thread(target = processBlocks)
    blkwrk.start()
    
    blks = None
    while True:
        try:
            blks = getBlocks(blk)
            break
        except socket.error:
            print "Cannot connect to rpc"
            time.sleep(5)
            pass
        except KeyboardInterrupt:
            pass
        except:
            print "Unknown error"
            time.sleep(5)
            pass
    
    # let block processing finish
    done.set()
    blkwrk.join()
    if blks:
        print "Session %.2f blks/s" % float(blks / (time.time() - workstart))
    
    # restore console
    termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

    


    

