#!/usr/bin/env python
#
#   sqlchaind - daemon to update sql blockchain db
#
import os, sys, socket, getopt, time, signal
from datetime import datetime
from bitcoinrpc.authproxy import AuthServiceProxy
from struct import pack, unpack, unpack_from
from hashlib import sha256
from gevent.queue import Queue
from gevent.event import Event

from lib.dbpool import *
from lib.sqlchain import *

cfg = { 'log':sys.argv[0]+'.log', 'prunegap':10, 'workers':1, 'queue':8, 
        'db':'localhost:btc:test623btc:bitcoin', 'rpc':'http://chris:cZ9k7ca22UIwPobTGQUm@cubian:8332' } 

memPool = set()

def getBlocks(blk):
    rpc = AuthServiceProxy(cfg['rpc'])
    if blk == 0:
        with dbpool.get().cursor() as cur:
            cur.execute('select ifnull(max(id), -1) from blocks')
            blk = int(cur.fetchone()[0] + 1)
    startblk = blk
    while not done.isSet():
        blkinfo = rpc.getblockchaininfo()
        if 'pruned' in blkinfo and blkinfo['pruned'] and (blk - blkinfo['pruneheight']) < cfg['prunegap']: 
            rpc.stop() # if pruning node, prevent it stoping us permanently
        if blk > blkinfo['blocks']:
            checkMemPool(rpc)
            continue
        if blockQ.qsize() >= cfg['queue']:
            gevent.sleep(10)
            continue
        rpcstart = time.time()
        blkhash = rpc.getblockhash(blk)
        if blkhash:
            data = decodeBlock(rpc.getblock(blkhash, False).decode('hex'))
            if data: 
                data['height'] = blk
                data['rpc'] = time.time()-rpcstart
                blockQ.put(data)
                blk += 1
            else: 
                logts("No data decoded for block %d" % blk)
                break
    return blk - startblk
        
def BlockHandler():
    while not done.isSet():
        insertBlock(dbpool.get().cursor(), blockQ.get())

def checkMemPool(cur, rpc):
    with dbpool.get().cursor() as cur:
        cur.execute("select ifnull(max(sync_id),0) from mempool;")
        sync_id = cur.fetchone()[0]
        if len(memPool) == 0:
            cur.execute("delete from mempool;")
    trxs = rpc.getrawmempool()
    for tx in trxs:
        txx = tx.decode('hex')[:8] # uses 1/4 space, only for detecting changes in mempool
        if txx not in memPool:
            memPool.add(txx)
            insertTxMemPool(rpc.getrawtransaction(tx,1), sync_id+1)           

def decodeBlock(data):
    hdr = ['version','previousblockhash','merkleroot', 'time', 'bits', 'nonce']
    hv = unpack_from('<I32s32s3I', data)
    block = dict(zip(hdr,hv))
    block['hdr'] = data[:80]
    block['hash'] = sha256(sha256(block['hdr']).digest()).digest()
    block['bits'] = '%08x' % block['bits'] 
    txcnt,off = decodeVarInt(data[80:89])
    off += 80
    block['tx'] = []
    while txcnt > 0:
        tx = decodeTx(data[off:])
        block['tx'].append(tx)
        off += tx['size']
        txcnt -= 1
    block['height'] = 0
    block['coinbase'] = block['tx'][0]['vin'][0]['coinbase']
    if block['version'] > 1 and block['height'] >= 227836 and block['coinbase'][0] == '\x03':
        block['height'] = unpack('<I', block['coinbase'][1:4]+'\0')[0]
        #print 'coinbase height', block['height'], block['tx'][0]['vin'][0]['coinbase'][1:4].encode('hex')
    return block

def decodeTx(data):
    vers, = unpack_from('<I', data)
    tx = { 'version': vers, 'vin':[], 'vout':[] }
    vicnt,off = decodeVarInt(data[4:13])
    off += 4
    while vicnt > 0:
        txid,vout = unpack_from('<32sI', data, off)
        sigsz,soff = decodeVarInt(data[off+36:off+36+9])
        off += soff+36
        seq, = unpack_from('<I', data, off+sigsz)
        if txid == '\0'*32 and vout == 0xffffffff: 
            tx['vin'].append({'coinbase':data[off:off+sigsz], 'sequence':seq })
        else:
            tx['vin'].append({'txid':txid, 'vout':vout, 'scriptSig':data[off:off+sigsz], 'sequence':seq })
        off += sigsz+4
        vicnt -= 1
    vocnt,voff = decodeVarInt(data[off:off+9])
    off += voff
    n = 0
    while n < vocnt:
        value, = unpack_from('<Q', data, off)
        pksz,soff = decodeVarInt(data[off+8:off+8+9])
        off += 8+soff
        tx['vout'].append({'value':value, 'n':n, 'scriptPubKey':decodeScriptPK( data[off:off+pksz] ) }) 
        off += pksz
        n += 1
    tx['locktime'], = unpack_from('<I', data, off)
    tx['size'] = off+4
    tx['txid'] = sha256(sha256(data[:tx['size']]).digest()).digest()
    return tx
       
def insertTxMemPool(tx, sync_id):
    with dbpool.get().cursor() as cur:
        tx_id = findTx(cur, tx['txid'], mkNew=True)
        if tx_id == None:
            ins,outs = InsertTx(cur, tx, tx_id, 0)
            cur.executemany("insert ignore into outputs (id,addr_id,value) values(%s,%s,%s)", outs)
            cur.executemany("update outputs set tx_id=%s where id=%s limit 1", ins)
        cur.execute("insert ignore into mempool (id,sync_id) values(%s,%s);", (tx_id, sync_id))

def insertTx(cur, tx, tx_id, blk_id):
    inlist,outlist = [],[]
    in_ids,txdata = '','' 
    stdSeq = True
    for vin in tx['vin']:
        if vin['sequence'] != 0xffffffff:
            stdSeq = False
            break
    for vin in tx['vin']:
        if 'coinbase' not in vin:
            in_id = findTx(cur, vin['txid'])
            if in_id and vin['vout'] < MAX_IO_TX:
                in_id = (in_id*MAX_IO_TX) + vin['vout']
                inlist.append(( tx_id, in_id ))
                in_ids += pack('<Q', in_id)[:7]
                txdata += encodeVarInt(len(vin['scriptSig'])) + vin['scriptSig']
                if not stdSeq:
                    txdata += pack('<I', vin['sequence'])
                                       
    for vout in tx['vout']:
        addr_id = insertAddress(cur, vout['scriptPubKey']['addr']) if 'addr' in vout['scriptPubKey'] else 0
        if vout['n'] < MAX_IO_TX:
            outlist.append(( tx_id*MAX_IO_TX + vout['n'], addr_id, vout['value'] ))
            txdata += encodeVarInt(len(vout['scriptPubKey']['data'])) + vout['scriptPubKey']['data']
            
    ins,outs,sz,txhdr = mkBlobHdr(len(inlist), len(outlist), tx, stdSeq)
    cur.execute("insert ignore into trxs (id,hash,ins,outs,txsize,txdata,block_id) values(%s,%s,%s,%s,%s,%s,%s)", 
        ( tx_id, tx['txid'], ins, outs, sz, insertBlob(txhdr + in_ids + txdata), blk_id ))    
    return inlist,outlist
            
def insertBlock(cur, data):
    blkstart = time.time()
    blk_id = data['height']*MAX_TX_BLK
    ins,outs = [],[]
    for n,tx in enumerate(data['tx']):
        tx_id = findTx(cur, tx['txid'], mkNew=True)
        if tx_id in memPool:
            memPool.remove(tx['txid'].decode('hex')[:8])
            cur.execute("delete from mempool where id=%s limit 1;", (tx_id,))
        xi,xo = insertTx(cur, tx, tx_id, blk_id + n)
        ins.extend(xi)
        outs.extend(xo)
    cur.executemany("insert ignore into outputs (id,addr_id,value) values(%s,%s,%s)", outs)
    cur.executemany("update outputs set tx_id=%s where id=%s limit 1", ins)
    cur.execute("insert ignore into blocks (id,hash,coinbase) values (%s,%s,%s);", (data['height'], data['hash'], data['coinbase']))
    
    puthdr(data['height'], data['hdr'])
    
    blktime = time.time() - blkstart
    print "block %d [ Q:%d %4d txs - %s - %3.0fms %2.1fs %3.0f tx/s]" % ( data['height'], blockQ.qsize(), 
        len(data['tx']), datetime.fromtimestamp(data['time']).strftime('%d-%m-%Y'), data['rpc']*1000, blktime, len(data['tx'])/blktime)

def options(cfg):
    try:                                
        opts,args = getopt.getopt(sys.argv[1:], "hvd:l:r:w:p:q:w:u:b:", 
            ["help", "version", "debug", "db=", "log=", "rpc=", "workers=", "prunegap=", "queue=", "user=", "block=", "defaults" ])
    except getopt.GetoptError:
        usage()
    for opt,arg in opts:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-v", "--version"):
            sys.exit(sys.argv[0]+': '+version)
        elif opt in ("-d", "--db"):
            cfg['db'] = arg
        elif opt in ("-l", "--log"):
            cfg['log'] = arg
        elif opt in ("-r", "--rpc"):
            cfg['rpc'] = arg
        elif opt in ("-w", "--workers"):
            cfg['workers'] = int(arg)
        elif opt in ("-p", "--prunegap"):
            cfg['prunegap'] = int(arg)
        elif opt in ("-q", "--queue"):
            cfg['queue'] = int(arg)
        elif opt in ("-u", "--user"):
            cfg['user'] = arg 
        elif opt in ("--defaults"):
            savecfg(cfg)
            sys.exit("%s updated" % (sys.argv[0]+'.cfg'))
        elif opt in ("-b", "--block"):
            cfg['block'] = int(arg)
        elif opt in ("--debug"):
            cfg['debug'] = True
        
def usage():
    print """Usage: %s [options...][cfg file]\nCommand options are:\n-h,--help\tShow this help info\n-v,--version\tShow version info
--defaults\tUpdate cfg and exit\nDefault files are %s.cfg .log .db
\nThese options get saved in cfg file as default.
-p,--prunegap\tSet min number blocks pruneable before stoping bitcoind\n-w,--workers\tSet number of workers
-q,--queue\tSet block queue size\n-u,--user\tSet user to run as\n-d,--db  \tSet mysql db connection, "host:user:pwd:dbname"
-l,--log\tSet log file path\n-r,--rpc\tSet rpc connection, "http://user:pwd@host:port"\n-b,--block\tStart at block number""" % (sys.argv[0], sys.argv[0])
    sys.exit(2) 
    
def sigterm_handler(_signo, _stack_frame):
    done.set()
    if not cfg['debug']:
        os.unlink(cfg['pid'] if 'pid' in cfg else sys.argv[0]+'.pid')
    
def run():
    global dbpool,blockQ,done
    from gevent import monkey; monkey.patch_socket()
    
    blockQ,done = Queue(),Event()
    dbpool = DBPool(cfg['db'].split(':'), cfg['workers']+1, 'MySQLdb')
    workers = [ gevent.spawn(BlockHandler) for i in range(cfg['workers']) ]
    
    blksdone = None
    workstart = time.time()
    while True:
        try:
            blksdone = getBlocks(cfg['block'] if 'block' in cfg else 0)
            break
        except socket.error:
            print "Cannot connect to rpc"
            gevent.sleep(5)
            pass  
    gevent.joinall(workers)
    if blksdone:
        print "Session %.2f blks/s" % float(blksdone / (time.time() - workstart))
    
if __name__ == '__main__':

    loadcfg(cfg)
    options(cfg)
    drop2user(cfg)
       
    if cfg['debug']:
        signal.signal(signal.SIGINT, sigterm_handler)
        run()
    else:
        with daemon.DaemonContext(working_directory='.', stdout=open(sys.argv[0]+'.log','a'), stderr=open(sys.argv[0]+'.log','a'), 
                signal_map={signal.SIGTERM:sigterm_handler } ):
            with file(cfg['pid'] if 'pid' in cfg else sys.argv[0]+'.pid','w') as f: 
                f.write(str(os.getpid()))
            run()

    

    


    

