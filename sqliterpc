#!/usr/bin/env python
#
# Test bitcoin-rpc

import sys, socket, datetime
import sqlite3 as db
from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException
from decimal import *
import json, mmh3

# encode json btc values as satoshis
class btcEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Decimal):
            return int(o*Decimal(1e8))
        return super(btcEncoder, self).default(o)

alphabet="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"

def b58bin(v):
    long_value = 0L
    for (i, c) in enumerate(v[::-1]):
        long_value += alphabet.find(c) * (58**i)
    result = ''
    while long_value >= 256:
        div, mod = divmod(long_value, 256)
        result = chr(mod) + result
        long_value = div
    result = chr(long_value) + result
    nPad = 0
    for c in v:
        if c == alphabet[0]: nPad += 1
        else: break
    result = chr(0)*nPad + result
    return buffer(result[1:-4])

def mkaddr(v):
    pad = ''
    an = chr(0) + str(v)
    for c in an:
        if c == '\0': pad += '1'
        else: break
    num = long((an + hashlib.sha256(hashlib.sha256(an).digest()).digest()[0:4]).encode('hex'), 16)
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = alphabet[m] + out
    return pad + alphabet[num] + out    
     
def main(blk):
    rpc = AuthServiceProxy("http://bogustester:cZ9k7ca22UIwPobTGQUm@127.0.0.1:8332")
    while True:
        blkhash = rpc.getblockhash(blk)
        if blkhash:
            data = rpc.getblock(blkhash)
            if data:
                with db.connect('bitcoin.db') as sql:
                    cur = sql.cursor()
                    insertBlock(cur, rpc, data)
            blk += 1

def insertAddress(cur, addr):
    addrhash = mmh3.hash(addr)
    cur.execute("select addr from address where hash=?", (addrhash,))
    row = cur.fetchone()
    if row == None or row[0] != addr:
        # find an unused hash entry for this address by scanning up
        while True:
            try: 
                cur.execute("insert into address (hash,addr) values(?,?)", (addrhash, addr))
            except db.IntegrityError:
                addrhash += 1
            else: break
    return addrhash
    
def insertBlock(cur, rpc, data):
    print "Inserting block", data['height'],
    cur.execute("insert into blocks (height,orphan,hash,time) values (?,?,?,?);", (data['height'], False, db.Binary(data['hash'].decode('hex')), data['time']))
    blkid = cur.lastrowid
    trxcount = 0
    for txhash in data['tx']:
        inputs = ''
        try:
            txdata = rpc.getrawtransaction(txhash, 1)
        except JSONRPCException as e:
            print "Err", e.args
            continue
        #print "Inserting tx", txhash
        for vin in txdata['vin']:
            if 'txid' in vin:
                cur.execute("select o.id from outputs as o, trxs as t where t.hash=? and o.trx_id=t.id limit 1 offset ?", (db.Binary(vin['txid'].decode('hex')), vin['vout']))
                outid = cur.fetchone()[0]
                inputs += '%08x' % outid
                cur.execute("insert into scripts (out_id,script) values (?,?)", (outid, db.Binary(vin['scriptSig']['hex'].decode('hex'))))
        cur.execute("insert into trxs (block_id,hash,inputs) values (?,?,?);", (blkid, db.Binary(txhash.decode('hex')), db.Binary(inputs.decode('hex'))))
        txid = cur.lastrowid
        trxcount += 1
        outputs = ''
        for vout in txdata['vout']:
            if 'addresses' in vout['scriptPubKey']:
                addrhash = insertAddress(cur, b58bin(vout['scriptPubKey']['addresses'][0]))
                cur.execute("insert into outputs (trx_id,addrhash,value) values(?,?,?)", (txid, addrhash, int(vout['value']*Decimal(1e8))))
                outputs += '%08x' % cur.lastrowid      
        if len(outputs) > 0:
            cur.execute("update trxs set outputs=? where id=?;", (db.Binary(outputs.decode('hex')), txid))
    print "[ %3d trxs - %s ]" % (trxcount, datetime.datetime.fromtimestamp(data['time']).strftime('%d-%m-%Y'))

    
if __name__ == '__main__':
    

    try:
        main(int(sys.argv[1]) if len(sys.argv) > 1 else 1)
    except socket.error:
        sys.exit("Cannot connect to rpc")
    except KeyboardInterrupt:
        sys.exit(0)



    

