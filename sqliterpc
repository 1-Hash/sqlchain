#!/usr/bin/env python
#
# Test bitcoin-rpc

import sys, socket, datetime
import sqlite3 as db
from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException
from decimal import *
from struct import unpack
import json, mmh3

# encode json btc values as satoshis
class btcEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Decimal):
            return int(o*Decimal(1e8))
        return super(btcEncoder, self).default(o)

alphabet="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"

def b58bin(v):
    long_value = 0L
    for (i, c) in enumerate(v[::-1]):
        long_value += alphabet.find(c) * (58**i)
    result = ''
    while long_value >= 256:
        div, mod = divmod(long_value, 256)
        result = chr(mod) + result
        long_value = div
    result = chr(long_value) + result
    nPad = 0
    for c in v:
        if c == alphabet[0]: nPad += 1
        else: break
    result = chr(0)*nPad + result
    return buffer(result[1:-4])

def mkaddr(v):
    pad = ''
    an = chr(0) + str(v)
    for c in an:
        if c == '\0': pad += '1'
        else: break
    num = long((an + hashlib.sha256(hashlib.sha256(an).digest()).digest()[0:4]).encode('hex'), 16)
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = alphabet[m] + out
    return pad + alphabet[num] + out    
     
def main(blk):
    rpc = AuthServiceProxy("http://bogustester:cZ9k7ca22UIwPobTGQUm@127.0.0.1:8332")
    sql = db.connect('bitcoin.db')
    cur = sql.cursor()
    cur.execute("PRAGMA synchronous = OFF")
    cur.execute("PRAGMA journal_mode = OFF")
    while True:
        blkhash = rpc.getblockhash(blk)
        if blkhash:
            data = rpc.getblock(blkhash)
            if data:
                try:
                    insertBlock(cur, rpc, data)
                    sql.commit()
                except db.Error as err:
                    print err
                    sql.rollback()
            blk += 1

def insertAddress(cur, addr):
    addrid, = unpack('=L', addr[:4]) #mmh3.hash(addr)
    cur.execute("select addr from address where id=?", (addrid,))
    row = cur.fetchone()
    if row == None or row[0] != addr:
        while True:
            try: 
                cur.execute("insert into address (id,addr) values(?,?)", (addrid, addr))
            except db.IntegrityError:
                print '!',
                addrid += 1
            else: break
    return addrid
    
def insertTrx(cur, blk_id, txhash, inputs):
    txid, = unpack('=L', txhash[:4]) #mmh3.hash(txhash)
    while True:
        try: 
            cur.execute("insert into trxs (id,hash,inputs,block_id) values(?,?,?,?)", (txid, txhash, inputs, blk_id))
        except db.IntegrityError:
            print '#',
            txid += 1
        else: break
    return txid
    
def findTrx(cur, txhash):
    txid, = unpack('=L', txhash[:4]) #mmh3.hash(txhash)
    while True:
        cur.execute("select hash from trxs where id=?", (txid,))
        row = cur.fetchone()
        if row and row[0] == txhash:
            return txid
        txid += 1

def insertBlock(cur, rpc, data):
    print "block", data['height'],
    cur.execute("insert into blocks (height,orphan,hash,time) values (?,?,?,?);", (data['height'], False, db.Binary(data['hash'].decode('hex')), data['time']))
    blkid = cur.lastrowid
    trxcount = 0
    for txhash in data['tx']:
        try:
            txdata = rpc.getrawtransaction(txhash, 1)
        except JSONRPCException as e:
            print "Err", e.args
            continue
        inputs = ''
        for vin in txdata['vin']:
            if 'txid' in vin:
                txid = findTrx(cur, db.Binary(vin['txid'].decode('hex')))
                cur.execute("select id from outputs where trx_id=? limit 1 offset ?", (txid, vin['vout']))
                outid = cur.fetchone()[0]
                inputs += '%08x' % outid
                cur.execute("insert into scripts (out_id,script) values (?,?)", (outid, db.Binary(vin['scriptSig']['hex'].decode('hex'))))
        txid = insertTrx(cur, blkid, db.Binary(txhash.decode('hex')), db.Binary(inputs.decode('hex')))
        trxcount += 1
        outputs = ''
        for vout in txdata['vout']:
            if 'addresses' in vout['scriptPubKey']:
                addrid = insertAddress(cur, b58bin(vout['scriptPubKey']['addresses'][0]))
                cur.execute("insert into outputs (trx_id,addr_id,value) values(?,?,?)", (txid, addrid, int(vout['value']*Decimal(1e8))))
                outputs += '%08x' % cur.lastrowid      
        if len(outputs) > 0:
            cur.execute("update trxs set outputs=? where id=?;", (db.Binary(outputs.decode('hex')), txid))
    print "[ %3d trxs - %s ]" % (trxcount, datetime.datetime.fromtimestamp(data['time']).strftime('%d-%m-%Y'))

    
if __name__ == '__main__':
    

    try:
        main(int(sys.argv[1]) if len(sys.argv) > 1 else 1)
    except socket.error:
        sys.exit("Cannot connect to rpc")
    except KeyboardInterrupt:
        sys.exit(0)



    

