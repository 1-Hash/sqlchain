#!/usr/bin/env python
#
#   presql - build sql blockchain db
#
#   initial step is to write a sql dump
#   that can be loaded into mysql quickly
#   without indexing
#
#   to do this the sql nneds to be "flat"
#   this is, not have references between tables
#   relying on indexing 
#
#   after tables are full of data we index 
#   much quicker in one final step using fixsql
#   script
#

import os, sys, socket, datetime, time
import select, termios, fcntl
from bitcoinrpc.authproxy import AuthServiceProxy
from decimal import *
from struct import pack, unpack, unpack_from
import json, hashlib
import threading

state = { 'pause':False }

alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"

def mkpkh(pk):
    rmd = hashlib.new('ripemd160')
    rmd.update(hashlib.sha256(pk).digest())
    return rmd.digest()

def addr2pkh(v):
    long_value = 0L
    for (i, c) in enumerate(v[::-1]):
        long_value += alphabet.find(c) * (58**i)
    result = ''
    while long_value >= 256:
        div, mod = divmod(long_value, 256)
        result = chr(mod) + result
        long_value = div
    result = chr(long_value) + result
    nPad = 0
    for c in v:
        if c == alphabet[0]: nPad += 1
        else: break
    result = chr(0)*nPad + result
    return result[1:-4]

def mkaddr(pkh, ver=0):
    pad = ''
    an = chr(ver) + str(pkh)
    for c in an:
        if c == '\0': pad += '1'
        else: break
    num = long((an + hashlib.sha256(hashlib.sha256(an).digest()).digest()[0:4]).encode('hex'), 16)
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = alphabet[m] + out
    return pad + alphabet[num] + out    
   
def IsKbdCmd(db):
    while True:
        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            key = sys.stdin.read(1)
            if key == 'x':
                return False
            elif key == ' ':
                state['pause'] = not state['pause']
                if state['pause']:
                    print "\n--- press space to resume ---"
            elif key == 's':
                pass
            
        if not state['pause']:
            return True
        time.sleep(0.5)

def processBlocks(blk):
    rpc = AuthServiceProxy("http://chris:cZ9k7ca22UIwPobTGQUm@localhost:8332")
    db = { 'address': None, 'trxs': None, 'outputs': None, 'inputs': None, 'blocks': None }
    startblk = blk
    for f in db:
        db[f] = open(f+'.sql', 'a+')
    
    wrkr = None
    while IsKbdCmd(db):
        netstart = time.time()
        blkhash = rpc.getblockhash(blk)
        if blkhash:
            data = decodeBlock(rpc.getblock(blkhash, False).decode('hex'))
            if data: 
                data['height'] = int(blk)
                if wrkr:
                    wrkr.join()
                print 'rpc %.03f' % ((time.time()-netstart),),
                wrkr = threading.Thread(target = insertBlock, args=(db, data))
                wrkr.start()
                blk += 1
            else: break
    
    wrkr.join()
    for f in db:
        db[f].close()
        
    return blk - startblk

def decodeBlock(data):
    hdr = ['version','previousblockhash','merkleroot', 'time', 'bits', 'nonce']
    hv = unpack_from('<I32s32s3I', data)
    block = dict(zip(hdr,hv))
    block['hdr'] = data[:80]
    block['hash'] = hashlib.sha256(hashlib.sha256(block['hdr']).digest()).digest()
    block['bits'] = '%08x' % block['bits'] 
    txcnt,off = decodeVarInt(data[80:89])
    off += 80
    block['tx'] = []
    while txcnt > 0:
        tx,toff = decodeTx(data[off:])
        block['tx'].append(tx)
        off += toff
        txcnt -= 1
    block['height'] = 0
    if block['version'] > 1:
        block['height'] = unpack('<I', block['tx'][0]['vin'][0]['coinbase'][1:4]+'\0')[0]
    return block
    
def decodeTx(data):
    vers, = unpack_from('<I', data)
    tx = { 'version': vers, 'vin':[], 'vout':[] }
    vicnt,off = decodeVarInt(data[4:13])
    off += 4
    while vicnt > 0:
        txid,vout = unpack_from('<32sI', data, off)
        sigsz,soff = decodeVarInt(data[off+36:off+36+9])
        off += soff+36
        seq, = unpack_from('<I', data, off+sigsz)
        if txid == '\0'*32 and vout == 0xffffffff: 
            tx['vin'].append({'coinbase':data[off:off+sigsz], 'sequence':seq })
        else:
            tx['vin'].append({'txid':txid, 'vout':vout, 'scriptSig':data[off:off+sigsz], 'sequence':seq })
        off += sigsz+4
        vicnt -= 1
    vocnt,voff = decodeVarInt(data[off:off+9])
    off += voff
    n = 0
    while n < vocnt:
        value, = unpack_from('<Q', data, off)
        pksz,soff = decodeVarInt(data[off+8:off+8+9])
        off += 8+soff
        tx['vout'].append({'value':value, 'n':n, 'scriptPubKey':decodeScriptPK( data[off:off+pksz] ) }) 
        off += pksz
        n += 1
    tx['locktime'], = unpack_from('<I', data, off)
    tx['txid'] = hashlib.sha256(hashlib.sha256(data[:off+4]).digest()).digest()
    return tx,off+4

def decodeScriptPK(data):
    if len(data) > 1:
        if data[:3] == '\x76\xa9\x14' and data[23:25] == '\x88\xac': # P2PKH
            return { 'type':'p2pkh', 'data':'', 'addr':mkaddr(data[3:23]) };
        if data[0] == '\xa9' and data[21] == '\x87': # P2SH
            return { 'type':'p2sh', 'data':'', 'addr':mkaddr(data[1:21],5)};
        if data[0] == '\x41' and data[66] == '\xac': # P2PK
            return { 'type':'p2pk', 'data':data, 'addr':mkaddr(mkpkh(data[1:66])) };
        if len(data) <= 41 and data[0] == '\x6a': # NULL
            return { 'type':'null', 'data':data };
    return { 'type':'other', 'data':data } # other, non-std

def decodeVarInt(v):
    if v[0] <= '\xfc':
        return unpack('<B', v[0])[0],1
    if v[0] == '\xfd':
        return unpack('<H', v[1:3])[0],3
    if v[0] == '\xfe':
        return unpack('<I', v[1:5])[0],5
    return unpack('<Q', v[1:9])[0],9
    
def insertAddress(db, addr_id, addr):
    pkh = addr2pkh(addr)
    addr_id *= 2
    if addr[0] == '1': # encode P2SH as even id, P2PKH as odd id
        addr_id += 1
    db['address'].write("insert into address (id,addr) values(%d,x'%s');\n" % (addr_id, pkh.encode('hex')))
    return addr_id 
   
def insertBlob(data):
    if len(data) == 0:
        return 0
    with open('/var/data/blobs.dat', 'r+b') as blob:
        blob.seek(0,2)
        pos = blob.tell()
        blob.write(data)
    return pos
    
def insertBlock(db, data):
    print "block", data['height'],
    blkstart = time.time()
    blk_id = data['height']*4
    for ntx,tx in enumerate(data['tx']):
        for vin in tx['vin']:
            if 'coinbase' in vin:
                data['coinbase'] = vin['coinbase']
            if 'txid' in vin:
                db['inputs'].write("insert into inputs (id,hash,out,sig) values(%d,x'%s',%ld);\n" % (blk_id*1000+ntx, vin['txid'].encode('hex'), vin['vout'], insertBlob(vin['scriptSig'] + pack('<I', vin['sequence'])) ) )
        
        db['trxs'].write("insert into trxs (id,hash,block_id) values(%d,x'%s',%d);\n" % (blk_id*1000+ntx, (tx['txid'] + pack('<BI', tx['version'], tx['locktime'])).encode('hex'), blk_id))
        for vout in tx['vout']:
            addr_id = insertAddress(db, (blk_id*1000+ntx)*4096+vout['n'], vout['scriptPubKey']['addr']) if 'addr' in vout['scriptPubKey'] else 0
            db['outputs'].write("insert into outputs (id,value,addr_id,pk) values(%d,%ld,%d,%ld);\n" % ((blk_id*1000+ntx)*4096+vout['n'], vout['value'], addr_id, insertBlob(vout['scriptPubKey']['data']) ))
            
    db['blocks'].write("insert into blocks (id,hash,hdr) values(%d,x'%s',x'%s');\n" % ( blk_id, data['hash'].encode('hex'), (data['hdr']+data['coinbase']).encode('hex') ) )
    
    blktime = time.time() - blkstart
    print "[ %3d txs - %s ]" % (len(data['tx']), datetime.datetime.fromtimestamp(data['time']).strftime('%d-%m-%Y')), blktime)

    
if __name__ == '__main__':
    
    if len(sys.argv) < 2:
        print "Start block# required"
        sys.exit(1)

    # set console for non-blocking key input
    fd = sys.stdin.fileno()
    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)
    
    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

    workstart = time.time()
    try:
        blks = processBlocks(int(sys.argv[1]))
    except socket.error:
        print "Cannot connect to rpc"
    except KeyboardInterrupt:
        pass
    finally:
        # restore console
        termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)
    
    print "Session %.1f blks/s" % float(blks / (time.time() - workstart))


    

