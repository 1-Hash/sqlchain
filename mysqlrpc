#!/usr/bin/env python
#
# sqlcoin - build sql blockchain db
#

import os, sys, socket, datetime, time
import select, termios, fcntl
from bitcoinrpc.authproxy import AuthServiceProxy
from decimal import *
from struct import pack, unpack, unpack_from
import json, hashlib
import MySQLdb as db

state = { 'pause':False }

# encode json btc values as satoshis
class btcEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Decimal):
            return int(o*Decimal(1e8))
        return super(btcEncoder, self).default(o)

alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"

def mkpkh(pk):
    rmd = hashlib.new('ripemd160')
    rmd.update(hashlib.sha256(pk).digest())
    return rmd.digest()

def addr2pkh(v):
    long_value = 0L
    for (i, c) in enumerate(v[::-1]):
        long_value += alphabet.find(c) * (58**i)
    result = ''
    while long_value >= 256:
        div, mod = divmod(long_value, 256)
        result = chr(mod) + result
        long_value = div
    result = chr(long_value) + result
    nPad = 0
    for c in v:
        if c == alphabet[0]: nPad += 1
        else: break
    result = chr(0)*nPad + result
    return result[1:-4]

def mkaddr(pkh, version=0):
    pad = ''
    an = chr(version) + str(pkh)
    for c in an:
        if c == '\0': pad += '1'
        else: break
    num = long((an + hashlib.sha256(hashlib.sha256(an).digest()).digest()[0:4]).encode('hex'), 16)
    out = ''
    while num >= 58:
        num,m = divmod(num, 58)
        out = alphabet[m] + out
    return pad + alphabet[num] + out    
   
def IsKbdCmd(cur):
    while True:
        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            key = sys.stdin.read(1)
            if key == 'x':
                return False
            elif key == ' ':
                state['pause'] = not state['pause']
                if state['pause']:
                    print "\n--- press space to resume ---"
            elif key == 's':
                cur.execute('select count(*) from trxs')
                print "\nTx: {:,}".format(cur.fetchone()[0])
                cur.execute('select count(*) from outputs')
                outs = cur.fetchone()[0]
                cur.execute('select count(*) from outputs where sig != 0')
                spent = cur.fetchone()[0]
                print "TxO: {:,}\nUTxO: {:,} - {:.0%}".format(outs, outs-spent, float(outs-spent)/outs)
                cur.execute('select count(*) from address')
                print "Addr: {:,}".format(cur.fetchone()[0])
                #print "Size: %4.1f MB" % (os.path.getsize('btc.db')/1e6)
                print
            elif key == 'b':
                import shutil
                print "\n--- backing up db ---"
                shutil.copy2('btc.db', 'btc.db.bak')
            
        if not state['pause']:
            return True
        time.sleep(0.5)

def processBlocks():
    rpc = AuthServiceProxy("http://chris:cZ9k7ca22UIwPobTGQUm@cubian:8332")
    sql = db.connect('localhost','btc','test623btc','bitcoin')
    cur = sql.cursor()
    cur.execute('select ifnull(max(id)/4, -1) from blocks')
    startblk = blk = int(cur.fetchone()[0] + 1)
    while IsKbdCmd(cur):
        blkhash = rpc.getblockhash(blk)
        if blkhash:
            data = decodeBlock(rpc.getblock(blkhash, False).decode('hex'))
            if data and verifyBlock(cur, data):
                try:
                    insertBlock(cur, data)
                    #sql.commit()
                except db.Error as err:
                    print err, sys.exc_info()[0]
                    #sql.rollback()
                blk += 1
            else: break
                  
    return blk - startblk

def decodeBlock(data):
    hdr = ['version','previousblockhash','merkleroot', 'time', 'bits', 'nonce']
    hv = unpack_from('<I32s32s3I', data)
    block = dict(zip(hdr,hv))
    block['hdr'] = data[:80]
    block['hash'] = hashlib.sha256(hashlib.sha256(block['hdr']).digest()).digest()
    block['bits'] = '%08x' % block['bits'] 
    txcnt,off = decodeVarInt(data[80:89])
    off += 80
    block['tx'] = []
    while txcnt > 0:
        tx,toff = decodeTx(data[off:])
        block['tx'].append(tx)
        off += toff
        txcnt -= 1
    block['height'] = 0
    if block['version'] > 1 and block['height'] >= 227836 and block['tx'][0]['vin'][0]['coinbase'][0] == '\x03':
        block['height'] = unpack('<I', block['tx'][0]['vin'][0]['coinbase'][1:4]+'\0')[0]
        #print 'coinbase height', block['height'], block['tx'][0]['vin'][0]['coinbase'][1:4].encode('hex')
    return block

def verifyBlock(cur, data):
    cur.execute("select id from blocks where hash=%s", (data['previousblockhash'],))
    row = cur.fetchone()
    if row:
        height = row[0] / 4 + 1
        if data['height'] != 0 and data['height'] != height:
            print "block height mismatch - coinbase height bad"
            return False
        data['height'] = height
    elif data['height'] != 0:
        print "orphan block - previous hash not found"
    
    mkt = [ tx['txid'] for tx in data['tx'] ]
    while len(mkt) > 1:
        if len(mkt) % 2 == 1:
            mkt.append(mkt[-1])
        mkt = [ hashlib.sha256(hashlib.sha256(mkt[i]+mkt[i+1]).digest()).digest() for i in range(0,len(mkt),2) ]
    if mkt[0] != data['merkleroot']:
        print "merkle tree failure"
    
    totalfees = ( int(50e8) >> ( data['height']/210000 ) )
    for tx in data['tx']:
        valid,fee = verifyTx(cur, data, tx)
        if not valid:
            return False
        totalfees += fee
    if totalfees < 0:
        print "coinbase payout off by", totalfees
        return False
    # todo,check time and bits
    return True
    
def decodeTx(data):
    vers, = unpack_from('<I', data)
    tx = { 'version': vers, 'vin':[], 'vout':[] }
    vicnt,off = decodeVarInt(data[4:13])
    off += 4
    while vicnt > 0:
        txid,vout = unpack_from('<32sI', data, off)
        sigsz,soff = decodeVarInt(data[off+36:off+36+9])
        off += soff+36
        seq, = unpack_from('<I', data, off+sigsz)
        if txid == '\0'*32 and vout == 0xffffffff: 
            tx['vin'].append({'coinbase':data[off:off+sigsz], 'sequence':seq })
        else:
            tx['vin'].append({'txid':txid, 'vout':vout, 'scriptSig':data[off:off+sigsz], 'sequence':seq })
        off += sigsz+4
        vicnt -= 1
    vocnt,voff = decodeVarInt(data[off:off+9])
    off += voff
    n = 0
    while n < vocnt:
        value, = unpack_from('<Q', data, off)
        pksz,soff = decodeVarInt(data[off+8:off+8+9])
        off += 8+soff
        tx['vout'].append({'value':value, 'n':n, 'scriptPubKey':decodeScriptPK( data[off:off+pksz] ) }) 
        off += pksz
        n += 1
    tx['locktime'], = unpack_from('<I', data, off)
    tx['txid'] = hashlib.sha256(hashlib.sha256(data[:off+4]).digest()).digest()
    return tx,off+4
    
def verifyTx(cur, block, tx):
    fee = 0
    for vin in tx['vin']:
        if 'txid' in vin:
            n = vin['vout']
            vout = TxInBlock(block, tx['txid'], vin['txid']) # may be in same block
            if vout:
                if 'addr' not in vout[n]['scriptPubKey']:
                    print "non-std input - no addr, ignoring"
                    continue
                if not verifyInput(vin['scriptSig'], vout[n]['scriptPubKey']['data'], vout[n]['scriptPubKey']['addr']):
                    print "bad input"
                    return False
                fee += vout[n]['value']
            else:
                tx_id = findTx(cur, vin['txid']) # otherwise has to be in prev block
                if tx_id == None:
                    print "tx invalid - no tx for this input", vin['txid'][::-1].encode('hex'), tx['txid'][::-1].encode('hex')
                    return False,0
                cur.execute("select value,addr,pk from outputs o,address a where o.id=%s and a.id=o.addr_id", ((tx_id<<12) + n, ))
                
                row = cur.fetchone()
                if row == None:
                    print "tx invalid - no output for this input", "%d %d %s" % (tx_id, (tx_id<<12) + n, vin['txid'].encode('hex'))
                    return False,0
                value,pkh,pk = row
                if not verifyInput(vin['scriptSig'], pk, pkh):
                    print "bad input"
                    return False
                fee += value
            
    for vout in tx['vout']:
        if 'addr' in vout['scriptPubKey']:
            fee -= vout['value']
        
    return True,fee

def TxInBlock(block, brkid, txid):
    for tx in block['tx']:
        if tx['txid'] == brkid:
            return None
        if tx['txid'] == txid:
            return tx['vout']
        
def verifyInput(sig, pk, pkh):
    #print 'verify s=%s, pk=%s, pkh=%s' % (str(sig).encode('hex'), str(pk).encode('hex'), str(pkh).encode('hex'))
    return True

def decodeScriptPK(data):
    if data[:3] == '\x76\xa9\x14' and data[23:25] == '\x88\xac': # P2PKH
        return { 'type':'p2pkh', 'data':'', 'addr':mkaddr(data[3:23]) };
    if data[0] == '\xa9' and data[21] == '\x87': # P2SH
        return { 'type':'p2sh', 'data':'', 'addr':mkaddr(data[1:21],5)};
    if data[0] == '\x41' and data[66] == '\xac': # P2PK
        return { 'type':'p2pk', 'data':data, 'addr':mkaddr(mkpkh(data[1:66])) };
    if len(data) <= 41 and data[0] == '\x6a': # NULL
        return { 'type':'null', 'data':data };
    return { 'type':'other', 'data':data } # other, non-std

def decodeVarInt(v):
    if v[0] <= '\xfc':
        return unpack('<B', v[0])[0],1
    if v[0] == '\xfd':
        return unpack('<H', v[1:3])[0],3
    if v[0] == '\xfe':
        return unpack('<I', v[1:5])[0],5
    return unpack('<Q', v[1:9])[0],9
    
def insertAddress(cur, addr):
    pkh = addr2pkh(addr)
    addr_id, = unpack('<q', pkh[:5]+'\0'*3) 
    addr_id *= 2
    if addr[0] == '3': # encode P2SH as odd id, P2PKH as even id
        addr_id += 1
    start_id = addr_id
    while True:    
        cur.execute("select addr from address where id=%s", (addr_id,))
        row = cur.fetchone()
        if row == None:
            cur.execute("insert into address (id,addr) values(%s,%s)", (addr_id, pkh))
            if addr_id != start_id:
                print '!',
            return addr_id
        elif str(row[0]) == str(pkh):
            return addr_id
        addr_id += 2
    
def insertTx(cur, txhash): 
    tx_id, = unpack('<q', txhash[:5]+'\0'*3)
    tx_id >>= 4
    while True:
        cur.execute("select hash from trxs where id=%s", (tx_id,))
        if cur.fetchone() == None:
            return tx_id
        print '#', # collision
        tx_id += 1
    
def findTx(cur, txhash, limit=32):
    tx_id, = unpack('<q', txhash[:5]+'\0'*3) 
    tx_id >>= 4    
    limit_id = tx_id+limit
    while True:
        cur.execute("select hash from trxs where id=%s", (tx_id,))
        row = cur.fetchone()
        if row == None:
            return None
        if str(row[0][:32]) == txhash:
            return tx_id
        if tx_id > limit_id:
            return None
        tx_id += 1

def insertBlock(cur, data):
    print "block", data['height'],
    blkstart = time.time()
    blk_id = data['height']*4
    outs = [] 
    sigs = []   
    for tx in data['tx']:
        inputs = ''
        for vin in tx['vin']:
            if 'coinbase' in vin:
                data['coinbase'] = vin['coinbase']
            elif 'txid' in vin:
                tx_id = findTx(cur, vin['txid'])
                in_id = (tx_id<<12) + vin['vout']
                inputs += pack('<Q', in_id)
                sigs.append( (insertBlob(vin['scriptSig'] + pack('<I', vin['sequence'])), in_id) )
                
        tx_id = insertTx(cur, tx['txid'])
        cur.execute("insert into trxs (id,hash,inputs,block_id) values(%s,%s,%s,%s)", ( tx_id, tx['txid'] + pack('<BI', tx['version'], tx['locktime']), inputs, blk_id ) )

        for vout in tx['vout']:
            out_id = (tx_id<<12) + vout['n']
            addr_id = insertAddress(cur, vout['scriptPubKey']['addr']) if 'addr' in vout['scriptPubKey'] else 0
            outs.append( ( out_id, addr_id, vout['value'], insertBlob(vout['scriptPubKey']['data']) ) )

    cur.executemany("insert into outputs (id,addr_id,value,pk) values(%s,%s,%s,%s)", outs)
    cur.executemany("update outputs set sig=%s where id=%s", sigs)
    cur.execute("insert into blocks (id,hash,hdr,coinbase) values (%s,%s,%s,%s);", (blk_id, data['hash'], data['hdr'], data['coinbase']))
    
    blktime = time.time() - blkstart
    print "[ %3d txs - %s - %4d tx/s ]" % (len(data['tx']), datetime.datetime.fromtimestamp(data['time']).strftime('%d-%m-%Y'), int(len(data['tx'])/blktime))

def insertBlob(data):
    if len(data) == 0:
        return 0
    with open('/var/data/blobs.dat', 'r+b') as blob:
        blob.seek(0,2)
        pos = blob.tell()
        blob.write(data)
    return pos
    
if __name__ == '__main__':

    # set console for non-blocking key input
    fd = sys.stdin.fileno()
    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)
    
    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

    workstart = time.time()
    try:
        blks = processBlocks()
    except socket.error:
        print "Cannot connect to rpc"
    except KeyboardInterrupt:
        pass
    finally:
        # restore console
        termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)
    
    print "Session %.1f blks/s" % float(blks / (time.time() - workstart))


    

